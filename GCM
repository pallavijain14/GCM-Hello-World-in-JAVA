package com.main.decrpytion;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;

public class GCM {

	static String plainText = "Hello World";

	public static final int GCM_IV_LENGTH = 12;
	public static final int GCM_TAG_LENGTH = 16;

	public static void main(String[] args) throws Exception{
		String secretKeyenc = "aesEncryptionKey";

		MessageDigest digest = MessageDigest.getInstance("SHA-256");
		byte[] hash = digest.digest(secretKeyenc.getBytes(StandardCharsets.UTF_8));
		String encoded = DatatypeConverter.printHexBinary(hash);        

		String ke = encoded.substring(0, 32);                  
		byte[] decodedKey = Base64.getDecoder().decode(ke.toLowerCase());

		byte[] IV = "aesEncryptionIV!".getBytes();

		SecretKeySpec secretKey = new SecretKeySpec(decodedKey, "AES");

		byte[] cipherText = encrypt(plainText.getBytes(StandardCharsets.UTF_8), secretKey, IV);
		System.out.println("Encrypted Text : "+ Base64.getEncoder().encodeToString(cipherText));

		String decryptedText = decrypt(cipherText, secretKey, IV);
		System.out.println("Decrypted Text : " + decryptedText);
	}


	public static byte[] encrypt(byte[] plaintext, SecretKey key, byte[] IV) throws Exception{

		Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");

		SecretKeySpec keySpec = new SecretKeySpec(key.getEncoded(), "AES");

		GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, IV);

		cipher.init(Cipher.ENCRYPT_MODE, keySpec, gcmParameterSpec);

		byte[] cipherText = cipher.doFinal(plaintext);

		return cipherText;
	}

	public static String decrypt(byte[] cipherText, SecretKey key, byte[] IV) throws Exception{

		Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");

		SecretKeySpec keySpec = new SecretKeySpec(key.getEncoded(), "AES");

		GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, IV);

		cipher.init(Cipher.DECRYPT_MODE, keySpec, gcmParameterSpec);

		byte[] decryptedText = cipher.doFinal(cipherText);

		return new String(decryptedText);
	}
}


